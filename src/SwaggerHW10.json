openapi: 3.0.0
info:
title: Робот-пылесос
version: 0.0.1
servers:
- url: http://localhost:8080/api/v1
description: Dev server
paths:
/Robots:
get:
summary: Метод получения списка роботов
tags:
- Robot
operationId: getAllRobots
responses:
"200":
description: Успешный ответ со списком роботов
content:
adplication/json:
schema:
$ref: "#/components/schemas/Robots"
"default":
description: Всё остальное
content:
adplication/json:
schema:
$ref: "#/components/schemas/Error"
post:
summary: Метод создания робота
tags:
- Robot
operationId: cretateRobot
requestBody:
required: true
content:
adplication/json:
schema:
$ref: "#/components/schemas/Robot"
responses:
"200":
description: Успешный ответ создания робота
content:
adplication/json:
schema:
$ref: "#/components/schemas/Robot"
"default":
description: Всё остальное
content:
adplication/json:
schema:
$ref: "#/components/schemas/Error"
/Robot/findById/{robotId}:
get:
tags:
- Robot
summary: найти робота по ID
description: вернуть робота
operationId: getRobotById
parameters:
- name: robotId
in: path
description: идентификатор робота
required: true
schema:
type: integer
format: int64
responses:
'200':
description: successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/Robot'
application/xml:
schema:
$ref: '#/components/schemas/Robot'
'400':
description: Invalid ID supplied
'404':
description: Robot not found
/User:
put:
tags:
- User
summary: обновить пользователя
description: обновить пользователя
operationId: updateUser
requestBody:
description: обновляет существующего пользователя в бд
content:
application/json:
schema:
$ref: '#/components/schemas/User'
application/xml:
schema:
$ref: '#/components/schemas/User'
application/x-www-form-urlencoded:
schema:
$ref: '#/components/schemas/User'
required: true
responses:
'200':
description: Successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/User'
application/xml:
schema:
$ref: '#/components/schemas/User'
'400':
description: Invalid ID supplied
'404':
description: Group not found
'405':
description: Validation exception

post:
tags:
- User
summary: добавить пользователя
description: добавить пользователя в базу
operationId: addUser
requestBody:
description: создание нового пользователя
content:
application/json:
schema:
$ref: '#/components/schemas/User'
application/xml:
schema:
$ref: '#/components/schemas/User'
application/x-www-form-urlencoded:
schema:
$ref: '#/components/schemas/User'
required: true
responses:
'200':
description: Successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/User'
application/xml:
schema:
$ref: '#/components/schemas/User'
'405':
description: Invalid input
/User/findById/{userId}:
get:
tags:
- User
summary: найти пользователя по ID
description: вернуть пользователя
operationId: getUserById
parameters:
- name: userId
in: path
description: идентификатор пользователя
required: true
schema:
type: integer
format: int64
responses:
'200':
description: successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/User'
application/xml:
schema:
$ref: '#/components/schemas/User'
'400':
description: Invalid ID supplied
'404':
description: User not found
/User/deleteById/{userId}:
delete:
tags:
- User
summary: удаление пользователя
description: удаление пользователя
operationId: deleteUser
parameters:
- name: userId
in: header
description: ''
required: false
schema:
type: string
- name: userId
in: path
description: ID пользователя
required: true
schema:
type: integer
format: int64
responses:
'400':
description: Invalid User value
/Schedule:
put:
tags:
- Schedule
summary: обновить расписание
description: обновление расписания
operationId: updateSchedule
requestBody:
description: обновить расписание в базе
content:
application/json:
schema:
$ref: '#/components/schemas/Schedule'
application/xml:
schema:
$ref: '#/components/schemas/Schedule'
application/x-www-form-urlencoded:
schema:
$ref: '#/components/schemas/Schedule'
required: true
responses:
'200':
description: Successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/Schedule'
application/xml:
schema:
$ref: '#/components/schemas/Schedule'
'400':
description: Invalid ID supplied
'404':
description: Schedule not found
'405':
description: Validation exception

post:
tags:
- Schedule
summary: добавить расписание
description: добавить расписание в базу
operationId: addSchedule
requestBody:
description: создание нового расписания
content:
application/json:
schema:
$ref: '#/components/schemas/Schedule'
application/xml:
schema:
$ref: '#/components/schemas/Schedule'
application/x-www-form-urlencoded:
schema:
$ref: '#/components/schemas/Schedule'
required: true
responses:
'200':
description: Successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/Schedule'
application/xml:
schema:
$ref: '#/components/schemas/Schedule'
'405':
description: Invalid input
/Schedule/deleteById/{id}:
delete:
tags:
- Schedule
summary: удалить робота
description: удаление робота
operationId: deleteSchedule
parameters:
- name: id
in: header
description: ''
required: false
schema:
type: string
- name: id
in: path
description: ID робота
required: true
schema:
type: integer
format: int64
responses:
'400':
description: Invalid Schedule value
components:
schemas:
Robot:
type: object
required:
- id
- model
- version
- status
- resourse
- fabric_model
- ip_adress
properties:
id:
type: integer
example: 1
model:
type: string
example: "AAA"
version:
type: string
example: "adfdf123sd"
status:
type: string
example: "worked"
resourse:
type: integer
example: 75
fabric_model:
type: integer
example: 1234567
ip_adress:
type: string
example: "192.168.2.5"
Robots:
type: array
items:
$ref: "#/components/schemas/Robot"
User:
type: object
required:
- id
- hash
- login
properties:
id:
type: integer
example: 1
hash:
type: integer
example: 1234567
login:
type: string
example: "qwerty"
Users:
type: array
items:
$ref: "#/components/schemas/User"

Error:
type: object
required:
- code_error
- message_error
properties:
code_error:
type: integer
message_error:
type: string
Schedule:
description: данные группы
content:
application/json:
schema:
$ref: '#/components/schemas/Schedule'
application/xml:
schema:
$ref: '#/components/schemas/Schedule'
ScheduleArray:
description: список групп
content:
application/json:
schema:
type: array
items:
$ref: '#/components/schemas/Schedule'
